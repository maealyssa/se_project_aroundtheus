!function(){"use strict";var e={960:function(e,t,s){e.exports=s.p+"190142da37235e3079a8.jpg"},291:function(e,t,s){e.exports=s.p+"9aed7cb3f54c0faa1f9f.jpg"},822:function(e,t,s){e.exports=s.p+"0fb96793ab89da938a7d.jpg"},328:function(e,t,s){e.exports=s.p+"395d21149564d1293c88.jpg"},705:function(e,t,s){e.exports=s.p+"a22751dd8a0e22ceb5f6.jpg"},561:function(e,t,s){e.exports=s.p+"0df918d480d675e4708e.jpg"}},t={};function s(r){var i=t[r];if(void 0!==i)return i.exports;var n=t[r]={exports:{}};return e[r](n,n.exports,s),n.exports}s.m=e,s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s.b=document.baseURI||self.location.href,function(){new URL(s(291),s.b),new URL(s(705),s.b),new URL(s(822),s.b),new URL(s(328),s.b),new URL(s(960),s.b),new URL(s(561),s.b);const e={cardsList:".cards__list",cardTemplate:"#card-template",previewPopup:"#image-modal",editFormPopup:"#edit-modal",addFormPopup:"#add-modal",profileTitle:".profile__title",profileDescription:".profile__description",profileAvatar:".profile__avatar",formModalContainer:".modal__container",imageModalContainer:".modal__container-image",formInputName:"#profile-input-name",formInputDescription:"#profile-input-description",changeAvatarPopup:"#change-avatar-modal",avatarForm:"#avatar-form",updateAvatarButton:"#modal-avatar-button",confirmDeleteModal:"#confirm-delete-modal"};var t=class{constructor(e,t,s,r,i,n){this._name=e.name,this._link=e.link,this._cardId=e._id,this._likes=e.likes,this._cardSelector=t,this._handleImageClick=s,this._handleDelete=i,this._handleLikeCard=r,this._currentUserId=n,this._owner=e.owner._id}_setEventListeners(){this.likeButton=this._element.querySelector(".card__like-button"),this.likeButton.addEventListener("click",(()=>this._setIsLiked(this))),this._element.querySelector(".card__trash-button").addEventListener("click",(()=>this._handleDelete)),this._imageModal=this._element.querySelector(".card__image"),this._imageModal.addEventListener("click",(()=>this._handleImageClick({link:this._link,name:this._name})))}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}handleLike(){this.isLiked?this.likeButton.classList.add("card__like-button_active"):this.likeButton.classList.remove("card__like-button_active")}isLiked(){return this._likes.some((e=>e._cardId===this._currentUserId))}deleteCard(){this._element.remove(),this._element=null}generateCard(){this._element=this._getTemplate();const e=this._element.querySelector(".card__image");return e.src=this._link,e.alt=this._name,this._element.querySelector(".card__title").textContent=this._name,this._setEventListeners(),this.handleLike(),this._element}};class r{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t,this._inputList=this._formElement.querySelectorAll(this._inputSelector)}_showInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hasInvalidInput(){return!this._inputElements.every((e=>e.validity.valid))}disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_enableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}_toggleButtonState(){this._hasInvalidInput()?this.disableButton():this._enableButton()}_setEventListeners(){this._inputElements=[...this._formElement.querySelectorAll(this._inputSelector)],this._submitButton=this._formElement.querySelector(this._submitButtonSelector),this._inputElements.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault(),this.disableButton()})),this._setEventListeners()}resetValidation(){this._toggleButtonState(),this._inputList.forEach((e=>{this._hideInputError(e)}))}}class i{constructor(e){let{popupSelector:t}=e;this._popup=document.querySelector(t),this._closeButton=this._popup.querySelector(".modal__close")}setEventListeners(){this._popup.addEventListener("click",(e=>{e.target===e.currentTarget&&this.close()})),this._closeButton.addEventListener("click",(()=>this.close()))}open(){this._popup.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()}}class n extends i{constructor(e,t){super({popupSelector:e}),this._form=this._popup.querySelector(".modal__form"),this._submitButton=this._popup.querySelector(".modal__button"),this._formInputs=this._popup.querySelectorAll("input"),this._handleFormSubmit=t,this._buttonText=this._submitButton.textContent}_getInputValues(){const e={};return this._formInputs.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){super.setEventListeners(),this._popup.addEventListener("submit",(()=>{this._handleFormSubmit(this._getInputValues())}))}renderLoading(e){this._submitButton.textContent=e?"Loading...":this._buttonText}close(){this._form.reset(),super.close()}}class o{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._cardSelector=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._cardSelector.prepend(e)}}const a=document.querySelector(".profile__edit-button"),l=document.querySelector(".profile__add-button"),d=document.forms["card-form"],c=document.forms["profile-form"],h=new class{constructor(e){let{nameEl:t,descriptionEl:s,avatarEl:r}=e;this._nameEl=document.querySelector(t),this._descriptionEl=document.querySelector(s),this._link=document.querySelector(r)}getUserInfo(){return{name:this._nameEl.textContent,description:this._descriptionEl.textContent,avatar:this._link.src}}setUserInfo(e){let{name:t,description:s}=e;this._nameEl.textContent=t,this._descriptionEl.textContent=s}setAvatarImage(e){this._link.src=e}}({nameEl:e.profileTitle,descriptionEl:e.profileDescription,avatarEl:e.profileAvatar}),u=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._url=t,this._headers=s,this._authorization=s.authorization}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error ${e.status}`)}getInitialCards(){return fetch(`${this._url}/cards`,{headers:this._headers}).then(this._checkResponse)}fetchUserInfo(){return fetch(`${this._url}/users/me`,{headers:this._headers}).then(this._checkResponse)}editProfile(e){let{name:t,description:s}=e;return fetch(`${this._url}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:s})}).then(this._checkResponse)}editProfileAvatar(e){let{link:t}=e;return fetch(`${this._url}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:t})}).then(this._checkResponse)}addNewCard(e){let{cardName:t,cardLink:s}=e;return fetch(`${this._url}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:s})}).then(this._checkResponse)}deleteCard(e){return fetch(`${this._url}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}addLike(e){return fetch(`${this._url}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then(this._checkResponse)}deleteLike(e){return fetch(`${this._url}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"174196d6-45bd-490a-bc0e-39b0754c7da9","Content-Type":"application/json"}});let _,p;Promise.all([u.fetchUserInfo(),u.getInitialCards()]).then((t=>{let[s,r]=t;p=s._id,h.setUserInfo({name:s.name,description:s.about}),h.setAvatarImage(s.avatar),_=new o({items:r,renderer:e=>{const t=E(e);_.addItem(t)}},e.cardsList),_.renderItems()})).catch((e=>{console.log(e)}));const m=e=>{k.open(e)},f=e=>{S.open(),S.setSubmitAction((()=>{S.renderLoading(!0),u.deleteCard(cardId).then((()=>{e.deleteCard(),S.close()})).catch((e=>{console.log(e)})).finally((()=>{S.renderLoading(!1)}))}))},v=e=>{e?u.removeLike(data).catch((e=>{console.log(e)})):u.addLike(data).catch((e=>{console.log(e)}))},E=e=>new t(e,m,v,f,p).generateCard(),b={};var L;L={inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible",formSelector:"form"},Array.from(document.querySelectorAll(L.formSelector)).forEach((e=>{const t=new r(L,e),s=e.getAttribute("name");b[s]=t,t.enableValidation()}));const g=new n(e.changeAvatarPopup,(e=>{g.renderLoading(!0),u.editProfileAvatar(e).then((e=>{h.setAvatarImage(e.avatar),g.close()})).catch((e=>{console.error(e)})).finally((()=>{g.renderLoading(!1)}))}));g.setEventListeners(),e.updateAvatarButton.addEventListener("click",(()=>{g.open(),b[e.avatarForm.getAttribute("name")].resetValidation()}));const k=new class extends i{constructor(e){super({popupSelector:e}),this._modalName=this._popup.querySelector(".modal__name"),this._modalImage=this._popup.querySelector(".modal__image"),super.setEventListeners()}open(e){this._modalName.textContent=e.name,this._modalImage.alt=e.name,this._modalImage.src=e.link,super.open()}}(e.previewPopup);k.close();const S=new class extends i{constructor(e){super({popupSelector:e}),this._submitButton=this._popup.querySelector(".modal__button")}setEventListeners(){super.setEventListeners(),this._submitButton.addEventListener("submit",(e=>{e.preventDefault(),this._handleDeleteSubmit()}))}open(e){this._handleDeleteCallback=e,super.open()}setSubmitAction(e){this._handleDeleteSubmit=e}}(e.confirmDeleteModal,(e=>{f(e)}));S.setEventListeners();const y=new n(e.editFormPopup,(e=>{y.renderLoading(!0),u.editProfile(e).then((()=>{h.setUserInfo({name:e.name,description:e.description}),y.close()})).catch((e=>{console.error(e)})).finally((()=>{y.renderLoading(!1)}))}));y.setEventListeners(),a.addEventListener("click",(()=>{const{name:t,description:s}=h.getUserInfo();e.formInputName.value=t,e.formInputDescription.value=s,b[c.getAttribute("name")].resetValidation(),y.open()}));const I=new n(e.addFormPopup,(e=>{I.renderLoading(!0),u.addNewCard(e).then((e=>{const t=E(e);_.addItem(t),I.close()})).catch((e=>{console.log(e)})).finally((()=>{I.renderLoading(!1)}))}));I.setEventListeners(),l.addEventListener("click",(()=>{b[d.getAttribute("name")].resetValidation(),I.open()}))}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoicVpBQ0lBLEVBQTJCLENBQUMsRUFHaEMsU0FBU0MsRUFBb0JDLEdBRTVCLElBQUlDLEVBQWVILEVBQXlCRSxHQUM1QyxRQUFxQkUsSUFBakJELEVBQ0gsT0FBT0EsRUFBYUUsUUFHckIsSUFBSUMsRUFBU04sRUFBeUJFLEdBQVksQ0FHakRHLFFBQVMsQ0FBQyxHQU9YLE9BSEFFLEVBQW9CTCxHQUFVSSxFQUFRQSxFQUFPRCxRQUFTSixHQUcvQ0ssRUFBT0QsT0FDZixDQUdBSixFQUFvQk8sRUFBSUQsRUN6QnhCTixFQUFvQlEsRUFBSSxTQUFTQyxFQUFLQyxHQUFRLE9BQU9DLE9BQU9DLFVBQVVDLGVBQWVDLEtBQUtMLEVBQUtDLEVBQU8sRUNBdEdWLEVBQW9CZSxFQUFJLEdDQXhCZixFQUFvQmdCLEVBQUlDLFNBQVNDLFNBQVdDLEtBQUtDLFNBQVNDLEssV0NBaEMsSUFBSUMsSUFBSSxZQUNELElBQUlBLElBQUksWUFDakIsSUFBSUEsSUFBSSxZQUNYLElBQUlBLElBQUksWUFDRixJQUFJQSxJQUFJLFlBQ1AsSUFBSUEsSUFBSSxZQUxwQyxNQTJDYUMsRUFBWSxDQUNyQkMsVUFBVyxlQUNYQyxhQUFjLGlCQUNkQyxhQUFjLGVBQ2RDLGNBQWUsY0FDZkMsYUFBYyxhQUNkQyxhQUFjLGtCQUNkQyxtQkFBb0Isd0JBQ3BCQyxjQUFlLG1CQUNmQyxtQkFBb0Isb0JBQ3BCQyxvQkFBcUIsMEJBQ3JCQyxjQUFlLHNCQUNmQyxxQkFBc0IsNkJBQ3RCQyxrQkFBbUIsdUJBQ25CQyxXQUFZLGVBQ1pDLG1CQUFvQix1QkFDcEJDLG1CQUFvQix5QkNZeEIsTUF2RUEsTUFDRUMsV0FBQUEsQ0FBWUMsRUFBTUMsRUFBY0MsRUFBa0JDLEVBQWdCQyxFQUFjQyxHQUM1RUMsS0FBS0MsTUFBUVAsRUFBS1EsS0FDbEJGLEtBQUtHLE1BQVFULEVBQUtVLEtBQ2xCSixLQUFLSyxRQUFVWCxFQUFLWSxJQUNwQk4sS0FBS08sT0FBU2IsRUFBS2MsTUFFbkJSLEtBQUtTLGNBQWdCZCxFQUNyQkssS0FBS1Usa0JBQW9CZCxFQUN6QkksS0FBS1csY0FBZ0JiLEVBQ3JCRSxLQUFLWSxnQkFBa0JmLEVBQ3ZCRyxLQUFLYSxlQUFpQmQsRUFDdEJDLEtBQUtjLE9BQVNwQixFQUFLcUIsTUFBTVQsR0FDM0IsQ0FFQVUsa0JBQUFBLEdBR0VoQixLQUFLaUIsV0FBYWpCLEtBQUtrQixTQUFTQyxjQUFjLHNCQUM5Q25CLEtBQUtpQixXQUFXRyxpQkFBaUIsU0FBUyxJQUFNcEIsS0FBS3FCLFlBQVlyQixRQUc3Q0EsS0FBS2tCLFNBQVNDLGNBQWMsdUJBQ3BDQyxpQkFBaUIsU0FBUyxJQUFNcEIsS0FBS1csZ0JBR2pEWCxLQUFLc0IsWUFBY3RCLEtBQUtrQixTQUFTQyxjQUFjLGdCQUMvQ25CLEtBQUtzQixZQUFZRixpQkFBaUIsU0FBUyxJQUFNcEIsS0FBS1Usa0JBQWtCLENBQUNOLEtBQU1KLEtBQUtHLE1BQU9ELEtBQU1GLEtBQUtDLFNBQ3hHLENBRUFzQixZQUFBQSxHQUNFLE9BQU9yRCxTQUNOaUQsY0FBY25CLEtBQUtTLGVBQ25CZSxRQUFRTCxjQUFjLFNBQ3RCTSxXQUFVLEVBQ2IsQ0FFQUMsVUFBQUEsR0FDSzFCLEtBQUsyQixRQUNOM0IsS0FBS2lCLFdBQVdXLFVBQVVDLElBQUksNEJBRTlCN0IsS0FBS2lCLFdBQVdXLFVBQVVFLE9BQU8sMkJBRXJDLENBRUFILE9BQUFBLEdBQ0UsT0FBTzNCLEtBQUtPLE9BQU93QixNQUFNQyxHQUFTQSxFQUFLM0IsVUFBWUwsS0FBS2EsZ0JBQzFELENBRUFvQixVQUFBQSxHQUNFakMsS0FBS2tCLFNBQVNZLFNBQ2Q5QixLQUFLa0IsU0FBVyxJQUNsQixDQUVBZ0IsWUFBQUEsR0FDRWxDLEtBQUtrQixTQUFXbEIsS0FBS3VCLGVBRXJCLE1BQU1ZLEVBQVluQyxLQUFLa0IsU0FBU0MsY0FBYyxnQkFVOUMsT0FUQWdCLEVBQVVDLElBQU1wQyxLQUFLRyxNQUNyQmdDLEVBQVVFLElBQU1yQyxLQUFLQyxNQUVIRCxLQUFLa0IsU0FBU0MsY0FBYyxnQkFDcENtQixZQUFjdEMsS0FBS0MsTUFFN0JELEtBQUtnQixxQkFDTGhCLEtBQUswQixhQUVFMUIsS0FBS2tCLFFBQ2QsR0NwRVcsTUFBTXFCLEVBQ2pCOUMsV0FBQUEsQ0FBWStDLEVBQVFDLEdBQ2hCekMsS0FBSzBDLGVBQWlCRixFQUFPRyxjQUM3QjNDLEtBQUs0QyxzQkFBd0JKLEVBQU9LLHFCQUNwQzdDLEtBQUs4QyxxQkFBdUJOLEVBQU9PLG9CQUNuQy9DLEtBQUtnRCxpQkFBbUJSLEVBQU9TLGdCQUMvQmpELEtBQUtrRCxZQUFjVixFQUFPVyxXQUUxQm5ELEtBQUtvRCxhQUFlWCxFQUNwQnpDLEtBQUtxRCxXQUFhckQsS0FBS29ELGFBQWFFLGlCQUFpQnRELEtBQUswQyxlQUM5RCxDQUVBYSxlQUFBQSxDQUFnQkMsR0FDWixNQUFNQyxFQUFzQnpELEtBQUtvRCxhQUFhakMsY0FBYyxJQUFJcUMsRUFBYUUsWUFDN0VGLEVBQWE1QixVQUFVQyxJQUFJN0IsS0FBS2dELGtCQUNoQ1MsRUFBb0JuQixZQUFja0IsRUFBYUcsa0JBQy9DRixFQUFvQjdCLFVBQVVDLElBQUk3QixLQUFLa0QsWUFDM0MsQ0FFQVUsZUFBQUEsQ0FBZ0JKLEdBQ1osTUFBTUMsRUFBc0J6RCxLQUFLb0QsYUFBYWpDLGNBQWMsSUFBSXFDLEVBQWFFLFlBQzdFRixFQUFhNUIsVUFBVUUsT0FBTzlCLEtBQUtnRCxrQkFDbkNTLEVBQW9CbkIsWUFBYyxHQUNsQ21CLEVBQW9CN0IsVUFBVUUsT0FBTzlCLEtBQUtrRCxZQUM5QyxDQUVBVyxtQkFBQUEsQ0FBb0JMLEdBQ1pBLEVBQWFNLFNBQVNDLE1BR3RCL0QsS0FBSzRELGdCQUFnQkosR0FGckJ4RCxLQUFLdUQsZ0JBQWdCQyxFQUk3QixDQUVBUSxnQkFBQUEsR0FDSSxPQUFRaEUsS0FBS2lFLGVBQWVDLE9BQU9WLEdBQWlCQSxFQUFhTSxTQUFTQyxPQUM5RSxDQUVBSSxhQUFBQSxHQUNJbkUsS0FBS29FLGNBQWN4QyxVQUFVQyxJQUFJN0IsS0FBSzhDLHNCQUN0QzlDLEtBQUtvRSxjQUFjQyxVQUFXLENBQ2xDLENBRUFDLGFBQUFBLEdBQ0l0RSxLQUFLb0UsY0FBY3hDLFVBQVVFLE9BQU85QixLQUFLOEMsc0JBQ3pDOUMsS0FBS29FLGNBQWNDLFVBQVcsQ0FDbEMsQ0FFQUUsa0JBQUFBLEdBQ092RSxLQUFLZ0UsbUJBQ0poRSxLQUFLbUUsZ0JBRUxuRSxLQUFLc0UsZUFFYixDQUVBdEQsa0JBQUFBLEdBQ0loQixLQUFLaUUsZUFBaUIsSUFBSWpFLEtBQUtvRCxhQUFhRSxpQkFBaUJ0RCxLQUFLMEMsaUJBQ2xFMUMsS0FBS29FLGNBQWdCcEUsS0FBS29ELGFBQWFqQyxjQUFjbkIsS0FBSzRDLHVCQUUxRDVDLEtBQUtpRSxlQUFlTyxTQUFRaEIsSUFDeEJBLEVBQWFwQyxpQkFBaUIsU0FBUyxLQUNuQ3BCLEtBQUs2RCxvQkFBb0JMLEdBQ3pCeEQsS0FBS3VFLG9CQUFvQixHQUMzQixHQUVWLENBRUFFLGdCQUFBQSxHQUNJekUsS0FBS29ELGFBQWFoQyxpQkFBaUIsVUFBV3NELElBQzFDQSxFQUFFQyxpQkFDRjNFLEtBQUttRSxlQUFlLElBR3hCbkUsS0FBS2dCLG9CQUNULENBRUE0RCxlQUFBQSxHQUNJNUUsS0FBS3VFLHFCQUVMdkUsS0FBS3FELFdBQVdtQixTQUFTaEIsSUFDckJ4RCxLQUFLNEQsZ0JBQWdCSixFQUFhLEdBRTFDLEVDbkZXLE1BQU1xQixFQUNqQnBGLFdBQUFBLENBQVdxRixHQUFvQixJQUFuQixjQUFFQyxHQUFlRCxFQUN6QjlFLEtBQUtnRixPQUFTOUcsU0FBU2lELGNBQWM0RCxHQUNyQy9FLEtBQUtpRixhQUFlakYsS0FBS2dGLE9BQU83RCxjQUFjLGdCQUNsRCxDQUVBK0QsaUJBQUFBLEdBQ0lsRixLQUFLZ0YsT0FBTzVELGlCQUFpQixTQUFVK0QsSUFDL0JBLEVBQUlDLFNBQVdELEVBQUlFLGVBQ25CckYsS0FBS3NGLE9BQ1QsSUFHSnRGLEtBQUtpRixhQUFhN0QsaUJBQWlCLFNBQVMsSUFBTXBCLEtBQUtzRixTQUMzRCxDQUVBQyxJQUFBQSxHQUNJdkYsS0FBS2dGLE9BQU9wRCxVQUFVQyxJQUFJLGdCQUMxQjNELFNBQVNrRCxpQkFBaUIsVUFBV3BCLEtBQUt3RixnQkFDOUMsQ0FFQUYsS0FBQUEsR0FDSXRGLEtBQUtnRixPQUFPcEQsVUFBVUUsT0FBTyxnQkFDN0I1RCxTQUFTdUgsb0JBQW9CLFVBQVd6RixLQUFLd0YsZ0JBQ2pELENBRUFBLGdCQUFtQkwsSUFDQSxXQUFaQSxFQUFJTyxLQUNIMUYsS0FBS3NGLE9BQ1QsRUMzQk8sTUFBTUssVUFBc0JkLEVBQ3ZDcEYsV0FBQUEsQ0FBWXNGLEVBQWVhLEdBQ3ZCQyxNQUFNLENBQUVkLGtCQUNSL0UsS0FBSzhGLE1BQVE5RixLQUFLZ0YsT0FBTzdELGNBQWMsZ0JBQ3ZDbkIsS0FBS29FLGNBQWdCcEUsS0FBS2dGLE9BQU83RCxjQUFjLGtCQUMvQ25CLEtBQUsrRixZQUFjL0YsS0FBS2dGLE9BQU8xQixpQkFBaUIsU0FDaER0RCxLQUFLZ0csa0JBQW9CSixFQUN6QjVGLEtBQUtpRyxZQUFjakcsS0FBS29FLGNBQWM5QixXQUMxQyxDQUVBNEQsZUFBQUEsR0FDSSxNQUFNQyxFQUFjLENBQUMsRUFNckIsT0FKQW5HLEtBQUsrRixZQUFZdkIsU0FBUTRCLElBQ3JCRCxFQUFZQyxFQUFNbEcsTUFBUWtHLEVBQU1DLEtBQUssSUFHbENGLENBQ1gsQ0FFQWpCLGlCQUFBQSxHQUNJVyxNQUFNWCxvQkFFTmxGLEtBQUtnRixPQUFPNUQsaUJBQWlCLFVBQVUsS0FDbkNwQixLQUFLZ0csa0JBQWtCaEcsS0FBS2tHLGtCQUFrQixHQUV0RCxDQUVBSSxhQUFBQSxDQUFjQyxHQUVOdkcsS0FBS29FLGNBQWM5QixZQURwQmlFLEVBQ2tDLGFBRUF2RyxLQUFLaUcsV0FFOUMsQ0FFQVgsS0FBQUEsR0FDSXRGLEtBQUs4RixNQUFNVSxRQUNYWCxNQUFNUCxPQUNWLEVDekNXLE1BQU1tQixFQUNqQmhILFdBQUFBLENBQVdxRixFQUFzQm5GLEdBQWMsSUFBbkMsTUFBRStHLEVBQUssU0FBRUMsR0FBVTdCLEVBQzNCOUUsS0FBSzRHLE9BQVNGLEVBQ2QxRyxLQUFLNkcsVUFBWUYsRUFDakIzRyxLQUFLUyxjQUFnQnZDLFNBQVNpRCxjQUFjeEIsRUFDaEQsQ0FFQW1ILFdBQUFBLEdBQ0k5RyxLQUFLNEcsT0FBT3BDLFNBQVN1QyxJQUNqQi9HLEtBQUs2RyxVQUFVRSxFQUFLLEdBRTVCLENBRUFDLE9BQUFBLENBQVFDLEdBQ0pqSCxLQUFLUyxjQUFjeUcsUUFBUUQsRUFDL0IsRUNISixNQUFNRSxFQUFhakosU0FBU2lELGNBQWMseUJBQ3BDaUcsRUFBWWxKLFNBQVNpRCxjQUFjLHdCQUVuQ2tHLEVBQWlCbkosU0FBU29KLE1BQU0sYUFDaENDLEVBQWtCckosU0FBU29KLE1BQU0sZ0JBR2pDRSxFQUFXLElDbkJGLE1BQ1gvSCxXQUFBQSxDQUFXcUYsR0FBc0MsSUFBckMsT0FBRTJDLEVBQU0sY0FBRUMsRUFBYSxTQUFFQyxHQUFVN0MsRUFDM0M5RSxLQUFLNEgsUUFBVTFKLFNBQVNpRCxjQUFjc0csR0FDdEN6SCxLQUFLNkgsZUFBaUIzSixTQUFTaUQsY0FBY3VHLEdBQzdDMUgsS0FBS0csTUFBUWpDLFNBQVNpRCxjQUFjd0csRUFDeEMsQ0FFQUcsV0FBQUEsR0FDSSxNQUFPLENBQ0g1SCxLQUFNRixLQUFLNEgsUUFBUXRGLFlBQ25CeUYsWUFBYS9ILEtBQUs2SCxlQUFldkYsWUFDakMwRixPQUFRaEksS0FBS0csTUFBTWlDLElBRTNCLENBRUE2RixXQUFBQSxDQUFXQyxHQUF3QixJQUF2QixLQUFFaEksRUFBSSxZQUFFNkgsR0FBYUcsRUFDN0JsSSxLQUFLNEgsUUFBUXRGLFlBQWNwQyxFQUMzQkYsS0FBSzZILGVBQWV2RixZQUFjeUYsQ0FDdEMsQ0FFQUksY0FBQUEsQ0FBZS9ILEdBQ1hKLEtBQUtHLE1BQU1pQyxJQUFNaEMsQ0FDckIsR0RIMEIsQ0FDMUJxSCxPQUFRakosRUFBVU0sYUFDbEI0SSxjQUFlbEosRUFBVU8sbUJBQ3pCNEksU0FBVW5KLEVBQVVRLGdCQUlsQm9KLEVBQU0sSUUxQkcsTUFDWDNJLFdBQUFBLENBQVdxRixHQUF1QixJQUF0QixRQUFFdUQsRUFBTyxRQUFFQyxHQUFTeEQsRUFDNUI5RSxLQUFLdUksS0FBT0YsRUFDWnJJLEtBQUt3SSxTQUFXRixFQUNoQnRJLEtBQUt5SSxlQUFpQkgsRUFBUUksYUFDbEMsQ0FFQUMsY0FBQUEsQ0FBZUMsR0FDWCxPQUFHQSxFQUFJQyxHQUNJRCxFQUFJRSxPQUVSQyxRQUFRQyxPQUFPLFNBQVNKLEVBQUlLLFNBQ3ZDLENBRUFDLGVBQUFBLEdBQ0ksT0FBT0MsTUFBTSxHQUFHbkosS0FBS3VJLGFBQWMsQ0FDL0JELFFBQVN0SSxLQUFLd0ksV0FFYlksS0FBS3BKLEtBQUsySSxlQUNuQixDQUVBVSxhQUFBQSxHQUNJLE9BQU9GLE1BQU0sR0FBR25KLEtBQUt1SSxnQkFBaUIsQ0FDbENELFFBQVN0SSxLQUFLd0ksV0FFakJZLEtBQUtwSixLQUFLMkksZUFDZixDQUVBVyxXQUFBQSxDQUFXcEIsR0FBd0IsSUFBdkIsS0FBRWhJLEVBQUksWUFBRTZILEdBQWFHLEVBQzdCLE9BQU9pQixNQUFNLEdBQUduSixLQUFLdUksZ0JBQWlCLENBQ3BDZ0IsT0FBUSxRQUNSakIsUUFBU3RJLEtBQUt3SSxTQUNkZ0IsS0FBTUMsS0FBS0MsVUFBVSxDQUNuQnhKLEtBQU1BLEVBQ055SixNQUFPNUIsTUFFUnFCLEtBQUtwSixLQUFLMkksZUFDZixDQUVGaUIsaUJBQUFBLENBQWlCQyxHQUFXLElBQVYsS0FBRXpKLEdBQU15SixFQUN0QixPQUFPVixNQUFNLEdBQUduSixLQUFLdUksdUJBQXdCLENBQ3pDZ0IsT0FBUSxRQUNSakIsUUFBU3RJLEtBQUt3SSxTQUNkZ0IsS0FBTUMsS0FBS0MsVUFBVSxDQUNqQjFCLE9BQVE1SCxNQUdmZ0osS0FBS3BKLEtBQUsySSxlQUNmLENBRUFtQixVQUFBQSxDQUFVQyxHQUF5QixJQUF4QixTQUFFQyxFQUFRLFNBQUVDLEdBQVVGLEVBQzdCLE9BQU9aLE1BQU0sR0FBR25KLEtBQUt1SSxhQUFjLENBQy9CZ0IsT0FBUSxPQUNSakIsUUFBU3RJLEtBQUt3SSxTQUNkZ0IsS0FBTUMsS0FBS0MsVUFBVSxDQUNqQnhKLEtBQU04SixFQUNONUosS0FBTTZKLE1BR2JiLEtBQUtwSixLQUFLMkksZUFDZixDQUVBMUcsVUFBQUEsQ0FBV2lJLEdBQ1AsT0FBT2YsTUFBTSxHQUFHbkosS0FBS3VJLGNBQWMyQixJQUFVLENBQ3pDWCxPQUFRLFNBQ1JqQixRQUFTdEksS0FBS3dJLFdBRWpCWSxLQUFLcEosS0FBSzJJLGVBQ2YsQ0FFQXdCLE9BQUFBLENBQVFELEdBQ0osT0FBT2YsTUFBTSxHQUFHbkosS0FBS3VJLGNBQWMyQixVQUFnQixDQUMvQ1gsT0FBUSxNQUNSakIsUUFBU3RJLEtBQUt3SSxXQUVqQlksS0FBS3BKLEtBQUsySSxlQUNmLENBRUF5QixVQUFBQSxDQUFXRixHQUNQLE9BQU9mLE1BQU0sR0FBR25KLEtBQUt1SSxjQUFjMkIsVUFBZ0IsQ0FDL0NYLE9BQVEsU0FDUmpCLFFBQVN0SSxLQUFLd0ksV0FFakJZLEtBQUtwSixLQUFLMkksZUFDZixHRjFEZ0IsQ0FDaEJOLFFBQVMsa0RBQ1RDLFFBQVMsQ0FDUEksY0FBZSx1Q0FDZixlQUFnQixzQkFJdEIsSUFBSTJCLEVBQ0F0SyxFQUVKZ0osUUFBUXVCLElBQUksQ0FBQ2xDLEVBQUlpQixnQkFBaUJqQixFQUFJYyxvQkFDakNFLE1BQUt0RSxJQUF1QixJQUFyQnlGLEVBQVVDLEdBQU0xRixFQUNwQi9FLEVBQWdCd0ssRUFBU2pLLElBQ3pCa0gsRUFBU1MsWUFBWSxDQUNqQi9ILEtBQU1xSyxFQUFTckssS0FDZjZILFlBQWF3QyxFQUFTWixRQUUxQm5DLEVBQVNXLGVBQWVvQyxFQUFTdkMsUUFDakNxQyxFQUFVLElBQUk1RCxFQUNWLENBQ0lDLE1BQU84RCxFQUNQN0QsU0FBV2pILElBQ1AsTUFBTStLLEVBQU9DLEVBQVdoTCxHQUN4QjJLLEVBQVFyRCxRQUFReUQsRUFBSyxHQUc3QmpNLEVBQVVDLFdBRWQ0TCxFQUFRdkQsYUFBYSxJQUV4QjZELE9BQU9DLElBQ0pDLFFBQVFDLElBQUlGLEVBQUksSUFJeEIsTUFBTWhMLEVBQW9CbUwsSUFDdEJDLEVBQVd6RixLQUFLd0YsRUFBVSxFQUd4QmpMLEVBQWdCMkssSUFDbEJqTCxFQUFtQitGLE9BQ25CL0YsRUFBbUJ5TCxpQkFBZ0IsS0FDL0J6TCxFQUFtQjhHLGVBQWMsR0FDakM4QixFQUFJbkcsV0FBV2lJLFFBQ1ZkLE1BQUssS0FDRnFCLEVBQUt4SSxhQUNMekMsRUFBbUI4RixPQUFPLElBRTdCcUYsT0FBT0MsSUFDSkMsUUFBUUMsSUFBSUYsRUFBSSxJQUVuQk0sU0FBUSxLQUNMMUwsRUFBbUI4RyxlQUFjLEVBQU0sR0FDekMsR0FDUixFQUdBekcsRUFBa0JzTCxJQUNqQkEsRUFDQy9DLEVBQUkrQyxXQUFXekwsTUFDVmlMLE9BQU9DLElBQ0pDLFFBQVFDLElBQUlGLEVBQUksSUFHeEJ4QyxFQUFJK0IsUUFBUXpLLE1BQ1BpTCxPQUFPQyxJQUNKQyxRQUFRQyxJQUFJRixFQUFJLEdBRTVCLEVBR0VGLEVBQWNoTCxHQUNILElBQUkwTCxFQUFLMUwsRUFBTUUsRUFBa0JDLEVBQWdCQyxFQUFjQyxHQUVoRW1DLGVBSVZtSixFQUFpQixDQUFDLEVBRUVDLFFOekVVLENBQ2hDM0ksY0FBZSxnQkFDZkUscUJBQXNCLGlCQUN0QkUsb0JBQXFCLHlCQUNyQkUsZ0JBQWlCLDBCQUNqQkUsV0FBWSx1QkFDWm9JLGFBQWMsUU1vRUdDLE1BQU1DLEtBQUt2TixTQUFTb0YsaUJBQWlCZ0ksRUFBcUJDLGVBRWxFL0csU0FBUy9CLElBQ2YsTUFBTWlKLEVBQVksSUFBSW5KLEVBQWMrSSxFQUFzQjdJLEdBQ3BEa0osRUFBV2xKLEVBQVltSixhQUFhLFFBRTFDUCxFQUFlTSxHQUFZRCxFQUMzQkEsRUFBVWpILGtCQUFrQixJQU9uQyxNQTRETW9ILEVBQW9CLElBQUlsRyxFQUFjbkgsRUFBVWEsbUJBaEIxQitHLElBQ3hCeUYsRUFBa0J2RixlQUFjLEdBQ2hDOEIsRUFBSXdCLGtCQUFrQnhELEdBQ2pCZ0QsTUFBTTFKLElBQ0g4SCxFQUFTVyxlQUFlekksRUFBS3NJLFFBQzdCNkQsRUFBa0J2RyxPQUFPLElBRTVCcUYsT0FBT0MsSUFDSkMsUUFBUWlCLE1BQU1sQixFQUFJLElBRXJCTSxTQUFRLEtBQ0xXLEVBQWtCdkYsZUFBYyxFQUFNLEdBQ3hDLElBS1Z1RixFQUFrQjNHLG9CQUVsQjFHLEVBQVVlLG1CQUFtQjZCLGlCQUFpQixTQUFTLEtBQ25EeUssRUFBa0J0RyxPQUNsQjhGLEVBQWU3TSxFQUFVYyxXQUFXc00sYUFBYSxTQUFTaEgsaUJBQWlCLElBSS9FLE1BQU1vRyxFQUFhLElHN0xKLGNBQTZCbkcsRUFDeENwRixXQUFBQSxDQUFZc0YsR0FDUmMsTUFBTSxDQUFFZCxrQkFDUi9FLEtBQUsrTCxXQUFhL0wsS0FBS2dGLE9BQU83RCxjQUFjLGdCQUM1Q25CLEtBQUtnTSxZQUFjaE0sS0FBS2dGLE9BQU83RCxjQUFjLGlCQUU3QzBFLE1BQU1YLG1CQUNWLENBRUFLLElBQUFBLENBQUt3RixHQUNEL0ssS0FBSytMLFdBQVd6SixZQUFjeUksRUFBVTdLLEtBQ3hDRixLQUFLZ00sWUFBWTNKLElBQU0wSSxFQUFVN0ssS0FDakNGLEtBQUtnTSxZQUFZNUosSUFBTTJJLEVBQVUzSyxLQUVqQ3lGLE1BQU1OLE1BQ1YsR0g4S2tDL0csRUFBVUcsY0FDaERxTSxFQUFXMUYsUUFHWCxNQUFNOUYsRUFBcUIsSUlqTVosY0FBK0JxRixFQUMxQ3BGLFdBQUFBLENBQVlzRixHQUNSYyxNQUFNLENBQUVkLGtCQUNSL0UsS0FBS29FLGNBQWdCcEUsS0FBS2dGLE9BQU83RCxjQUFjLGlCQUNuRCxDQUVBK0QsaUJBQUFBLEdBQ0lXLE1BQU1YLG9CQUVObEYsS0FBS29FLGNBQWNoRCxpQkFBaUIsVUFBVytELElBQzNDQSxFQUFJUixpQkFDSjNFLEtBQUtpTSxxQkFBcUIsR0FFbEMsQ0FFQTFHLElBQUFBLENBQUsyRyxHQUNEbE0sS0FBS21NLHNCQUF3QkQsRUFDN0JyRyxNQUFNTixNQUNWLENBRUEwRixlQUFBQSxDQUFnQm1CLEdBQ1pwTSxLQUFLaU0sb0JBQXNCRyxDQUMvQixHSjJLNEM1TixFQUFVZ0Isb0JBQ3JEaUwsSUFBVTNLLEVBQWEySyxFQUFLLElBQ2pDakwsRUFBbUIwRixvQkFHbkIsTUFBTW1ILEVBQW1CLElBQUkxRyxFQUFjbkgsRUFBVUksZUE3RHBCd0gsSUFDN0JpRyxFQUFpQi9GLGVBQWMsR0FDL0I4QixFQUFJa0IsWUFBWWxELEdBQ1hnRCxNQUFLLEtBQ0Y1QixFQUFTUyxZQUFZLENBQ2pCL0gsS0FBTWtHLEVBQU1sRyxLQUNaNkgsWUFBYTNCLEVBQU0yQixjQUV2QnNFLEVBQWlCL0csT0FBTyxJQUUzQnFGLE9BQU9DLElBQ0pDLFFBQVFpQixNQUFNbEIsRUFBSSxJQUVyQk0sU0FBUSxLQUNMbUIsRUFBaUIvRixlQUFjLEVBQU0sR0FDdkMsSUErQ1YrRixFQUFpQm5ILG9CQUVqQmlDLEVBQVcvRixpQkFBaUIsU0E5Q0hrTCxLQUNyQixNQUFNLEtBQUVwTSxFQUFJLFlBQUU2SCxHQUFnQlAsRUFBU00sY0FDdkN0SixFQUFVVyxjQUFja0gsTUFBUW5HLEVBQ2hDMUIsRUFBVVkscUJBQXFCaUgsTUFBUTBCLEVBQ3ZDc0QsRUFBZTlELEVBQWdCcUUsYUFBYSxTQUFTaEgsa0JBQ3JEeUgsRUFBaUI5RyxNQUFNLElBNEMzQixNQUFNZ0gsRUFBYyxJQUFJNUcsRUFBY25ILEVBQVVLLGNBcEZuQmEsSUFDekI2TSxFQUFZakcsZUFBYyxHQUMxQjhCLEVBQUkwQixXQUFXcEssR0FDVjBKLE1BQU1vRCxJQUNILE1BQU1DLEVBQVMvQixFQUFXOEIsR0FDMUJuQyxFQUFRckQsUUFBUXlGLEdBQ2hCRixFQUFZakgsT0FBTyxJQUV0QnFGLE9BQU9DLElBQ0pDLFFBQVFDLElBQUlGLEVBQUksSUFFbkJNLFNBQVEsS0FDTHFCLEVBQVlqRyxlQUFjLEVBQU0sR0FDbEMsSUF3RVZpRyxFQUFZckgsb0JBRVprQyxFQUFVaEcsaUJBQWlCLFNBQVMsS0FDaENpSyxFQUFlaEUsRUFBZXVFLGFBQWEsU0FBU2hILGtCQUNwRDJILEVBQVloSCxNQUFNLEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90cmlwbGV0ZW4vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vdHJpcGxldGVuL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vdHJpcGxldGVuL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL3RyaXBsZXRlbi93ZWJwYWNrL3J1bnRpbWUvanNvbnAgY2h1bmsgbG9hZGluZyIsIndlYnBhY2s6Ly90cmlwbGV0ZW4vLi9zcmMvdXRpbHMvY29uc3RhbnRzLmpzIiwid2VicGFjazovL3RyaXBsZXRlbi8uL3NyYy9jb21wb25lbnRzL0NhcmQuanMiLCJ3ZWJwYWNrOi8vdHJpcGxldGVuLy4vc3JjL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly90cmlwbGV0ZW4vLi9zcmMvY29tcG9uZW50cy9Qb3B1cC5qcyIsIndlYnBhY2s6Ly90cmlwbGV0ZW4vLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzIiwid2VicGFjazovL3RyaXBsZXRlbi8uL3NyYy9jb21wb25lbnRzL1NlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vdHJpcGxldGVuLy4vc3JjL3BhZ2VzL2luZGV4LmpzIiwid2VicGFjazovL3RyaXBsZXRlbi8uL3NyYy9jb21wb25lbnRzL1VzZXJJbmZvLmpzIiwid2VicGFjazovL3RyaXBsZXRlbi8uL3NyYy9jb21wb25lbnRzL0FwaS5qcyIsIndlYnBhY2s6Ly90cmlwbGV0ZW4vLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qcyIsIndlYnBhY2s6Ly90cmlwbGV0ZW4vLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhDb25maXJtLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gX193ZWJwYWNrX21vZHVsZXNfXztcblxuIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqLCBwcm9wKSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTsgfSIsIl9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5iID0gZG9jdW1lbnQuYmFzZVVSSSB8fCBzZWxmLmxvY2F0aW9uLmhyZWY7XG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4vLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbi8vIFtyZXNvbHZlLCByZWplY3QsIFByb21pc2VdID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxudmFyIGluc3RhbGxlZENodW5rcyA9IHtcblx0MTc5OiAwXG59O1xuXG4vLyBubyBjaHVuayBvbiBkZW1hbmQgbG9hZGluZ1xuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWRcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdFxuXG4vLyBubyBvbiBjaHVua3MgbG9hZGVkXG5cbi8vIG5vIGpzb25wIGZ1bmN0aW9uIiwiY29uc3QgbGFnb0RpQnJhaWVzSW1hZ2UgPSBuZXcgVVJMKFwiLi4vaW1hZ2VzL2xhZ28uanBnXCIsIGltcG9ydC5tZXRhLnVybCk7XG5jb25zdCB2YW5vaXNlTmF0aW9uYWxQYXJrSW1hZ2UgPSBuZXcgVVJMKFwiLi4vaW1hZ2VzL3Zhbm9pc2UuanBnXCIsIGltcG9ydC5tZXRhLnVybCk7XG5jb25zdCBsYWtlTG91aXNlSW1hZ2UgPSBuZXcgVVJMKFwiLi4vaW1hZ2VzL2xha2UtbG91aXNlLmpwZ1wiLCBpbXBvcnQubWV0YS51cmwpO1xuY29uc3QgbGF0ZW1hckltYWdlID0gbmV3IFVSTChcIi4uL2ltYWdlcy9sYXRlbWFyLmpwZ1wiLCBpbXBvcnQubWV0YS51cmwpO1xuY29uc3QgYmFsZE1vdW50YWluc0ltYWdlID0gbmV3IFVSTChcIi4uL2ltYWdlcy9iYWxkLW1vdW50YWlucy5qcGdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbmNvbnN0IHlvc2VtaXRlVmFsbGV5SW1hZ2UgPSBuZXcgVVJMKFwiLi4vaW1hZ2VzL3lvc2VtaXRlLmpwZ1wiLCBpbXBvcnQubWV0YS51cmwpO1xuXG5leHBvcnQgY29uc3QgaW5pdGlhbENhcmRzID0gW1xuICAgIHtcbiAgICAgICAgbmFtZTogXCJMYWdvIGRpIEJyYWllc1wiLFxuICAgICAgICBsaW5rOiBsYWdvRGlCcmFpZXNJbWFnZVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIlZhbm9pc2UgTmF0aW9uYWwgUGFya1wiLFxuICAgICAgICBsaW5rOiB2YW5vaXNlTmF0aW9uYWxQYXJrSW1hZ2VcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJMYWtlIExvdWlzZVwiLFxuICAgICAgICBsaW5rOiBsYWtlTG91aXNlSW1hZ2VcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJMYXRlbWFyXCIsXG4gICAgICAgIGxpbms6IGxhdGVtYXJJbWFnZVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkJhbGQgTW91bnRhaW5zXCIsXG4gICAgICAgIGxpbms6IGJhbGRNb3VudGFpbnNJbWFnZVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIllvc2VtaXRlIFZhbGxleVwiLFxuICAgICAgICBsaW5rOiB5b3NlbWl0ZVZhbGxleUltYWdlXG4gICAgfVxuXTtcblxuZXhwb3J0IGNvbnN0IGZvcm1WYWxpZGF0aW9uQ29uZmlnID0ge1xuICAgIGlucHV0U2VsZWN0b3I6IFwiLm1vZGFsX19pbnB1dFwiLFxuICAgIHN1Ym1pdEJ1dHRvblNlbGVjdG9yOiBcIi5tb2RhbF9fYnV0dG9uXCIsXG4gICAgaW5hY3RpdmVCdXR0b25DbGFzczogXCJtb2RhbF9fYnV0dG9uX2Rpc2FibGVkXCIsXG4gICAgaW5wdXRFcnJvckNsYXNzOiBcIm1vZGFsX19pbnB1dF90eXBlX2Vycm9yXCIsXG4gICAgZXJyb3JDbGFzczogXCJtb2RhbF9fZXJyb3JfdmlzaWJsZVwiLFxuICAgIGZvcm1TZWxlY3RvcjogXCJmb3JtXCIsXG59O1xuXG5leHBvcnQgY29uc3Qgc2VsZWN0b3JzID0ge1xuICAgIGNhcmRzTGlzdDogJy5jYXJkc19fbGlzdCcsXG4gICAgY2FyZFRlbXBsYXRlOiAnI2NhcmQtdGVtcGxhdGUnLFxuICAgIHByZXZpZXdQb3B1cDogJyNpbWFnZS1tb2RhbCcsXG4gICAgZWRpdEZvcm1Qb3B1cDogJyNlZGl0LW1vZGFsJyxcbiAgICBhZGRGb3JtUG9wdXA6ICcjYWRkLW1vZGFsJyxcbiAgICBwcm9maWxlVGl0bGU6ICcucHJvZmlsZV9fdGl0bGUnLFxuICAgIHByb2ZpbGVEZXNjcmlwdGlvbjogJy5wcm9maWxlX19kZXNjcmlwdGlvbicsXG4gICAgcHJvZmlsZUF2YXRhcjogJy5wcm9maWxlX19hdmF0YXInLFxuICAgIGZvcm1Nb2RhbENvbnRhaW5lcjogJy5tb2RhbF9fY29udGFpbmVyJyxcbiAgICBpbWFnZU1vZGFsQ29udGFpbmVyOiAnLm1vZGFsX19jb250YWluZXItaW1hZ2UnLFxuICAgIGZvcm1JbnB1dE5hbWU6ICcjcHJvZmlsZS1pbnB1dC1uYW1lJyxcbiAgICBmb3JtSW5wdXREZXNjcmlwdGlvbjogJyNwcm9maWxlLWlucHV0LWRlc2NyaXB0aW9uJyxcbiAgICBjaGFuZ2VBdmF0YXJQb3B1cDogXCIjY2hhbmdlLWF2YXRhci1tb2RhbFwiLFxuICAgIGF2YXRhckZvcm06IFwiI2F2YXRhci1mb3JtXCIsXG4gICAgdXBkYXRlQXZhdGFyQnV0dG9uOiBcIiNtb2RhbC1hdmF0YXItYnV0dG9uXCIsXG4gICAgY29uZmlybURlbGV0ZU1vZGFsOiBcIiNjb25maXJtLWRlbGV0ZS1tb2RhbFwiLFxufTtcbiIsImNsYXNzIENhcmQge1xuICBjb25zdHJ1Y3RvcihkYXRhLCBjYXJkU2VsZWN0b3IsIGhhbmRsZUltYWdlQ2xpY2ssIGhhbmRsZUxpa2VDYXJkLCBoYW5kbGVEZWxldGUsIGN1cnJlbnRVc2VySWQpIHtcbiAgICAgIHRoaXMuX25hbWUgPSBkYXRhLm5hbWU7XG4gICAgICB0aGlzLl9saW5rID0gZGF0YS5saW5rO1xuICAgICAgdGhpcy5fY2FyZElkID0gZGF0YS5faWQ7XG4gICAgICB0aGlzLl9saWtlcyA9IGRhdGEubGlrZXM7XG5cbiAgICAgIHRoaXMuX2NhcmRTZWxlY3RvciA9IGNhcmRTZWxlY3RvcjtcbiAgICAgIHRoaXMuX2hhbmRsZUltYWdlQ2xpY2sgPSBoYW5kbGVJbWFnZUNsaWNrO1xuICAgICAgdGhpcy5faGFuZGxlRGVsZXRlID0gaGFuZGxlRGVsZXRlO1xuICAgICAgdGhpcy5faGFuZGxlTGlrZUNhcmQgPSBoYW5kbGVMaWtlQ2FyZDtcbiAgICAgIHRoaXMuX2N1cnJlbnRVc2VySWQgPSBjdXJyZW50VXNlcklkO1xuICAgICAgdGhpcy5fb3duZXIgPSBkYXRhLm93bmVyLl9pZDtcbiAgICB9XG4gICAgXG4gICAgX3NldEV2ZW50TGlzdGVuZXJzKCkge1xuXG4gICAgICAvL2xpa2UgYnV0dG9uXG4gICAgICB0aGlzLmxpa2VCdXR0b24gPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fbGlrZS1idXR0b25cIik7XG4gICAgICB0aGlzLmxpa2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB0aGlzLl9zZXRJc0xpa2VkKHRoaXMpKTtcblxuICAgICAgLy90cmFzaCBidXR0b25cbiAgICAgIGNvbnN0IHRyYXNoQnV0dG9uID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuY2FyZF9fdHJhc2gtYnV0dG9uJyk7XG4gICAgICB0cmFzaEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHRoaXMuX2hhbmRsZURlbGV0ZSk7XG5cbiAgICAgIC8vaW1hZ2UgbW9kYWwgY2xpY2tcbiAgICAgIHRoaXMuX2ltYWdlTW9kYWwgPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYXJkX19pbWFnZScpO1xuICAgICAgdGhpcy5faW1hZ2VNb2RhbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHRoaXMuX2hhbmRsZUltYWdlQ2xpY2soe2xpbms6IHRoaXMuX2xpbmssIG5hbWU6IHRoaXMuX25hbWV9KSk7XG4gICAgfVxuXG4gICAgX2dldFRlbXBsYXRlKCkge1xuICAgICAgcmV0dXJuIGRvY3VtZW50XG4gICAgICAucXVlcnlTZWxlY3Rvcih0aGlzLl9jYXJkU2VsZWN0b3IpXG4gICAgICAuY29udGVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRcIilcbiAgICAgIC5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgfVxuXG4gICAgaGFuZGxlTGlrZSgpIHtcbiAgICAgIGlmKHRoaXMuaXNMaWtlZCkge1xuICAgICAgICB0aGlzLmxpa2VCdXR0b24uY2xhc3NMaXN0LmFkZChcImNhcmRfX2xpa2UtYnV0dG9uX2FjdGl2ZVwiKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5saWtlQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoXCJjYXJkX19saWtlLWJ1dHRvbl9hY3RpdmVcIilcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpc0xpa2VkKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2xpa2VzLnNvbWUoKGxpa2UpID0+IGxpa2UuX2NhcmRJZCA9PT0gdGhpcy5fY3VycmVudFVzZXJJZCk7XG4gICAgfVxuXG4gICAgZGVsZXRlQ2FyZCgpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlKCk7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcbiAgICB9XG5cbiAgICBnZW5lcmF0ZUNhcmQoKSB7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gdGhpcy5fZ2V0VGVtcGxhdGUoKTtcblxuICAgICAgY29uc3QgY2FyZEltYWdlID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2ltYWdlXCIpO1xuICAgICAgY2FyZEltYWdlLnNyYyA9IHRoaXMuX2xpbms7XG4gICAgICBjYXJkSW1hZ2UuYWx0ID0gdGhpcy5fbmFtZTtcblxuICAgICAgY29uc3QgY2FyZFRpdGxlID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX3RpdGxlXCIpO1xuICAgICAgY2FyZFRpdGxlLnRleHRDb250ZW50ID0gdGhpcy5fbmFtZTtcblxuICAgICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKTtcbiAgICAgIHRoaXMuaGFuZGxlTGlrZSgpO1xuXG4gICAgICByZXR1cm4gdGhpcy5fZWxlbWVudDtcbiAgICB9XG4gIH1cblxuZXhwb3J0IGRlZmF1bHQgQ2FyZDsiLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBGb3JtVmFsaWRhdG9yIHtcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcsIGZvcm1FbGVtZW50KSB7XG4gICAgICAgIHRoaXMuX2lucHV0U2VsZWN0b3IgPSBjb25maWcuaW5wdXRTZWxlY3RvcjtcbiAgICAgICAgdGhpcy5fc3VibWl0QnV0dG9uU2VsZWN0b3IgPSBjb25maWcuc3VibWl0QnV0dG9uU2VsZWN0b3I7XG4gICAgICAgIHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MgPSBjb25maWcuaW5hY3RpdmVCdXR0b25DbGFzcztcbiAgICAgICAgdGhpcy5faW5wdXRFcnJvckNsYXNzID0gY29uZmlnLmlucHV0RXJyb3JDbGFzcztcbiAgICAgICAgdGhpcy5fZXJyb3JDbGFzcyA9IGNvbmZpZy5lcnJvckNsYXNzO1xuXG4gICAgICAgIHRoaXMuX2Zvcm1FbGVtZW50ID0gZm9ybUVsZW1lbnQ7XG4gICAgICAgIHRoaXMuX2lucHV0TGlzdCA9IHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5faW5wdXRTZWxlY3Rvcik7XG4gICAgfVxuXG4gICAgX3Nob3dJbnB1dEVycm9yKGlucHV0RWxlbWVudCkge1xuICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2VFbGVtZW50ID0gdGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvcihgIyR7aW5wdXRFbGVtZW50LmlkfS1lcnJvcmApXG4gICAgICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX2lucHV0RXJyb3JDbGFzcyk7XG4gICAgICAgIGVycm9yTWVzc2FnZUVsZW1lbnQudGV4dENvbnRlbnQgPSBpbnB1dEVsZW1lbnQudmFsaWRhdGlvbk1lc3NhZ2U7XG4gICAgICAgIGVycm9yTWVzc2FnZUVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl9lcnJvckNsYXNzKTtcbiAgICB9XG5cbiAgICBfaGlkZUlucHV0RXJyb3IoaW5wdXRFbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZUVsZW1lbnQgPSB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKGAjJHtpbnB1dEVsZW1lbnQuaWR9LWVycm9yYClcbiAgICAgICAgaW5wdXRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5faW5wdXRFcnJvckNsYXNzKTtcbiAgICAgICAgZXJyb3JNZXNzYWdlRWxlbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XG4gICAgICAgIGVycm9yTWVzc2FnZUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9lcnJvckNsYXNzKTtcbiAgICB9XG5cbiAgICBfY2hlY2tJbnB1dFZhbGlkaXR5KGlucHV0RWxlbWVudCkge1xuICAgICAgICBpZighaW5wdXRFbGVtZW50LnZhbGlkaXR5LnZhbGlkKSB7XG4gICAgICAgICAgICB0aGlzLl9zaG93SW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9oaWRlSW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2hhc0ludmFsaWRJbnB1dCgpIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLl9pbnB1dEVsZW1lbnRzLmV2ZXJ5KChpbnB1dEVsZW1lbnQpID0+IGlucHV0RWxlbWVudC52YWxpZGl0eS52YWxpZCk7XG4gICAgfVxuXG4gICAgZGlzYWJsZUJ1dHRvbigpIHtcbiAgICAgICAgdGhpcy5fc3VibWl0QnV0dG9uLmNsYXNzTGlzdC5hZGQodGhpcy5faW5hY3RpdmVCdXR0b25DbGFzcyk7XG4gICAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5kaXNhYmxlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgX2VuYWJsZUJ1dHRvbigpIHtcbiAgICAgICAgdGhpcy5fc3VibWl0QnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5faW5hY3RpdmVCdXR0b25DbGFzcyk7XG4gICAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIF90b2dnbGVCdXR0b25TdGF0ZSgpIHtcbiAgICAgICAgaWYodGhpcy5faGFzSW52YWxpZElucHV0KCkpIHtcbiAgICAgICAgICAgIHRoaXMuZGlzYWJsZUJ1dHRvbigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fZW5hYmxlQnV0dG9uKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICAgIHRoaXMuX2lucHV0RWxlbWVudHMgPSBbLi4udGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCh0aGlzLl9pbnB1dFNlbGVjdG9yKV07XG4gICAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbiA9IHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5fc3VibWl0QnV0dG9uU2VsZWN0b3IpO1xuXG4gICAgICAgIHRoaXMuX2lucHV0RWxlbWVudHMuZm9yRWFjaChpbnB1dEVsZW1lbnQgPT4ge1xuICAgICAgICAgICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NoZWNrSW5wdXRWYWxpZGl0eShpbnB1dEVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3RvZ2dsZUJ1dHRvblN0YXRlKCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGVuYWJsZVZhbGlkYXRpb24oKSB7XG4gICAgICAgIHRoaXMuX2Zvcm1FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIChlKSA9PiB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB0aGlzLmRpc2FibGVCdXR0b24oKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKVxuICAgIH1cblxuICAgIHJlc2V0VmFsaWRhdGlvbigpIHtcbiAgICAgICAgdGhpcy5fdG9nZ2xlQnV0dG9uU3RhdGUoKTtcblxuICAgICAgICB0aGlzLl9pbnB1dExpc3QuZm9yRWFjaCgoaW5wdXRFbGVtZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9oaWRlSW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpXG4gICAgICAgIH0pO1xuICAgIH1cblxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXAge1xuICAgIGNvbnN0cnVjdG9yKHsgcG9wdXBTZWxlY3RvciB9KSB7XG4gICAgICAgIHRoaXMuX3BvcHVwID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihwb3B1cFNlbGVjdG9yKTtcbiAgICAgICAgdGhpcy5fY2xvc2VCdXR0b24gPSB0aGlzLl9wb3B1cC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX2Nsb3NlJyk7XG4gICAgfVxuXG4gICAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICAgIHRoaXMuX3BvcHVwLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2dCkgPT4ge1xuICAgICAgICAgICAgaWYgKGV2dC50YXJnZXQgPT09IGV2dC5jdXJyZW50VGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLl9jbG9zZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHRoaXMuY2xvc2UoKSk7XG4gICAgfVxuXG4gICAgb3BlbigpIHtcbiAgICAgICAgdGhpcy5fcG9wdXAuY2xhc3NMaXN0LmFkZCgnbW9kYWxfb3BlbmVkJyk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLl9oYW5kbGVFc2NDbG9zZSk7XG4gICAgfVxuXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHRoaXMuX3BvcHVwLmNsYXNzTGlzdC5yZW1vdmUoJ21vZGFsX29wZW5lZCcpO1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5faGFuZGxlRXNjQ2xvc2UpO1xuICAgIH1cblxuICAgIF9oYW5kbGVFc2NDbG9zZSA9IChldnQpID0+IHtcbiAgICAgICAgaWYoZXZ0LmtleSA9PT0gXCJFc2NhcGVcIikge1xuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICB9XG4gICAgfVxufSIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cFdpdGhGb3JtIGV4dGVuZHMgUG9wdXAge1xuICAgIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IsIGhhbmRsZUZvcm1TdWJtaXQpIHtcbiAgICAgICAgc3VwZXIoeyBwb3B1cFNlbGVjdG9yIH0pO1xuICAgICAgICB0aGlzLl9mb3JtID0gdGhpcy5fcG9wdXAucXVlcnlTZWxlY3RvcignLm1vZGFsX19mb3JtJyk7XG4gICAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbiA9IHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbF9fYnV0dG9uJyk7XG4gICAgICAgIHRoaXMuX2Zvcm1JbnB1dHMgPSB0aGlzLl9wb3B1cC5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dCcpO1xuICAgICAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0ID0gaGFuZGxlRm9ybVN1Ym1pdDtcbiAgICAgICAgdGhpcy5fYnV0dG9uVGV4dCA9IHRoaXMuX3N1Ym1pdEJ1dHRvbi50ZXh0Q29udGVudDtcbiAgICB9XG5cbiAgICBfZ2V0SW5wdXRWYWx1ZXMoKSB7XG4gICAgICAgIGNvbnN0IGlucHV0T2JqZWN0ID0ge307XG5cbiAgICAgICAgdGhpcy5fZm9ybUlucHV0cy5mb3JFYWNoKGlucHV0ID0+IHtcbiAgICAgICAgICAgIGlucHV0T2JqZWN0W2lucHV0Lm5hbWVdID0gaW5wdXQudmFsdWU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBpbnB1dE9iamVjdDtcbiAgICB9XG5cbiAgICBzZXRFdmVudExpc3RlbmVycygpIHtcbiAgICAgICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcblxuICAgICAgICB0aGlzLl9wb3B1cC5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0KHRoaXMuX2dldElucHV0VmFsdWVzKCkpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZW5kZXJMb2FkaW5nKGlzTG9hZGluZykge1xuICAgICAgICBpZihpc0xvYWRpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi50ZXh0Q29udGVudCA9IFwiTG9hZGluZy4uLlwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fc3VibWl0QnV0dG9uLnRleHRDb250ZW50ID0gdGhpcy5fYnV0dG9uVGV4dDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNsb3NlKCkge1xuICAgICAgICB0aGlzLl9mb3JtLnJlc2V0KClcbiAgICAgICAgc3VwZXIuY2xvc2UoKTsgICAgICAgIFxuICAgIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBTZWN0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcih7IGl0ZW1zLCByZW5kZXJlciB9LCBjYXJkU2VsZWN0b3IpIHtcbiAgICAgICAgdGhpcy5faXRlbXMgPSBpdGVtcztcbiAgICAgICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgICAgICAgdGhpcy5fY2FyZFNlbGVjdG9yID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihjYXJkU2VsZWN0b3IpO1xuICAgIH1cblxuICAgIHJlbmRlckl0ZW1zKCkge1xuICAgICAgICB0aGlzLl9pdGVtcy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJlcihpdGVtKTtcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBhZGRJdGVtKGVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5fY2FyZFNlbGVjdG9yLnByZXBlbmQoZWxlbWVudCk7XG4gICAgfVxufSIsImltcG9ydCB7IGZvcm1WYWxpZGF0aW9uQ29uZmlnLCBpbml0aWFsQ2FyZHMsIHNlbGVjdG9ycyB9IGZyb20gXCIuLi91dGlscy9jb25zdGFudHMuanNcIjtcbmltcG9ydCBTdHlsZXMgZnJvbSBcIi4vaW5kZXguY3NzXCI7XG5cbmltcG9ydCBDYXJkIGZyb20gXCIuLi9jb21wb25lbnRzL0NhcmQuanNcIjtcbmltcG9ydCBGb3JtVmFsaWRhdG9yIGZyb20gXCIuLi9jb21wb25lbnRzL0Zvcm1WYWxpZGF0b3IuanNcIjtcbmltcG9ydCBQb3B1cFdpdGhGb3JtIGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanNcIjtcbmltcG9ydCBQb3B1cFdpdGhJbWFnZSBmcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qc1wiO1xuaW1wb3J0IFBvcHVwV2l0aENvbmZpcm0gZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoQ29uZmlybS5qc1wiO1xuaW1wb3J0IFNlY3Rpb24gZnJvbSBcIi4uL2NvbXBvbmVudHMvU2VjdGlvbi5qc1wiO1xuaW1wb3J0IFVzZXJJbmZvIGZyb20gXCIuLi9jb21wb25lbnRzL1VzZXJJbmZvLmpzXCI7XG5pbXBvcnQgQXBpIGZyb20gXCIuLi9jb21wb25lbnRzL0FwaS5qc1wiO1xuXG5jb25zdCBlZGl0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGVfX2VkaXQtYnV0dG9uJyk7XG5jb25zdCBhZGRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZV9fYWRkLWJ1dHRvbicpO1xuXG5jb25zdCBhZGROZXdDYXJkRm9ybSA9IGRvY3VtZW50LmZvcm1zWydjYXJkLWZvcm0nXTtcbmNvbnN0IHByb2ZpbGVFZGl0Rm9ybSA9IGRvY3VtZW50LmZvcm1zWydwcm9maWxlLWZvcm0nXTtcblxuLy9Vc2VySW5mb1xuY29uc3QgdXNlckluZm8gPSBuZXcgVXNlckluZm8oe1xuICAgIG5hbWVFbDogc2VsZWN0b3JzLnByb2ZpbGVUaXRsZSwgXG4gICAgZGVzY3JpcHRpb25FbDogc2VsZWN0b3JzLnByb2ZpbGVEZXNjcmlwdGlvbiwgXG4gICAgYXZhdGFyRWw6IHNlbGVjdG9ycy5wcm9maWxlQXZhdGFyLFxufSk7XG5cbi8vQVBJIFxuY29uc3QgYXBpID0gbmV3IEFwaSh7XG4gICAgYmFzZVVybDogXCJodHRwczovL2Fyb3VuZC1hcGkuZW4udHJpcGxldGVuLXNlcnZpY2VzLmNvbS92MVwiLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgIGF1dGhvcml6YXRpb246IFwiMTc0MTk2ZDYtNDViZC00OTBhLWJjMGUtMzliMDc1NGM3ZGE5XCIsXG4gICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9LFxufSk7XG5cbmxldCBzZWN0aW9uO1xubGV0IGN1cnJlbnRVc2VySWQ7XG5cblByb21pc2UuYWxsKFthcGkuZmV0Y2hVc2VySW5mbygpLCBhcGkuZ2V0SW5pdGlhbENhcmRzKCldKVxuICAgIC50aGVuKChbdXNlckRhdGEsIGNhcmRzXSkgPT4ge1xuICAgICAgICBjdXJyZW50VXNlcklkID0gdXNlckRhdGEuX2lkO1xuICAgICAgICB1c2VySW5mby5zZXRVc2VySW5mbyh7XG4gICAgICAgICAgICBuYW1lOiB1c2VyRGF0YS5uYW1lLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IHVzZXJEYXRhLmFib3V0LFxuICAgICAgICB9KTtcbiAgICAgICAgdXNlckluZm8uc2V0QXZhdGFySW1hZ2UodXNlckRhdGEuYXZhdGFyKTtcbiAgICAgICAgc2VjdGlvbiA9IG5ldyBTZWN0aW9uKFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW1zOiBjYXJkcyxcbiAgICAgICAgICAgICAgICByZW5kZXJlcjogKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FyZCA9IHJlbmRlckNhcmQoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIHNlY3Rpb24uYWRkSXRlbShjYXJkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2VsZWN0b3JzLmNhcmRzTGlzdFxuICAgICAgICApO1xuICAgICAgICBzZWN0aW9uLnJlbmRlckl0ZW1zKCk7XG4gICAgfSlcbiAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgIH0pO1xuXG4vL3JlbmRlcmluZyBjYXJkIGhhbmRsZXJzXG5jb25zdCBoYW5kbGVJbWFnZUNsaWNrID0gKGltYWdlRGF0YSkgPT4ge1xuICAgIHBvcHVwSW1hZ2Uub3BlbihpbWFnZURhdGEpXG59XG5cbmNvbnN0IGhhbmRsZURlbGV0ZSA9IChjYXJkKSA9PiB7XG4gICAgY29uZmlybURlbGV0ZU1vZGFsLm9wZW4oKTtcbiAgICBjb25maXJtRGVsZXRlTW9kYWwuc2V0U3VibWl0QWN0aW9uKCgpID0+IHtcbiAgICAgICAgY29uZmlybURlbGV0ZU1vZGFsLnJlbmRlckxvYWRpbmcodHJ1ZSk7XG4gICAgICAgIGFwaS5kZWxldGVDYXJkKGNhcmRJZClcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICBjYXJkLmRlbGV0ZUNhcmQoKTtcbiAgICAgICAgICAgICAgICBjb25maXJtRGVsZXRlTW9kYWwuY2xvc2UoKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbmZpcm1EZWxldGVNb2RhbC5yZW5kZXJMb2FkaW5nKGZhbHNlKTtcbiAgICAgICAgICAgIH0pXG4gICAgfSlcbn1cblxuY29uc3QgaGFuZGxlTGlrZUNhcmQgPSAocmVtb3ZlTGlrZSkgPT4ge1xuICAgIGlmKHJlbW92ZUxpa2UpIHtcbiAgICAgICAgYXBpLnJlbW92ZUxpa2UoZGF0YSlcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgICAgYXBpLmFkZExpa2UoZGF0YSlcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cbn1cblxuY29uc3QgcmVuZGVyQ2FyZCA9IChkYXRhKSA9PiB7XG4gICAgY29uc3QgY2FyZCA9IG5ldyBDYXJkKGRhdGEsIGhhbmRsZUltYWdlQ2xpY2ssIGhhbmRsZUxpa2VDYXJkLCBoYW5kbGVEZWxldGUsIGN1cnJlbnRVc2VySWQsKTtcblxuICAgIHJldHVybiBjYXJkLmdlbmVyYXRlQ2FyZCgpO1xufTtcblxuLy8gdmFsaWRhdGlvblxuY29uc3QgZm9ybVZhbGlkYXRvcnMgPSB7fTtcblxuY29uc3QgZW5hYmxlVmFsaWRhdGlvbiA9IChmb3JtVmFsaWRhdGlvbkNvbmZpZykgPT4ge1xuICAgIGNvbnN0IGZvcm1MaXN0ID0gQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGZvcm1WYWxpZGF0aW9uQ29uZmlnLmZvcm1TZWxlY3RvcikpO1xuXG4gICAgZm9ybUxpc3QuZm9yRWFjaCgoZm9ybUVsZW1lbnQpID0+IHtcbiAgICAgICBjb25zdCB2YWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcihmb3JtVmFsaWRhdGlvbkNvbmZpZywgZm9ybUVsZW1lbnQpO1xuICAgICAgIGNvbnN0IGZvcm1OYW1lID0gZm9ybUVsZW1lbnQuZ2V0QXR0cmlidXRlKFwibmFtZVwiKTsgXG5cbiAgICAgICBmb3JtVmFsaWRhdG9yc1tmb3JtTmFtZV0gPSB2YWxpZGF0b3I7XG4gICAgICAgdmFsaWRhdG9yLmVuYWJsZVZhbGlkYXRpb24oKTtcbiAgICB9KTtcbn1cblxuZW5hYmxlVmFsaWRhdGlvbihmb3JtVmFsaWRhdGlvbkNvbmZpZyk7XG5cbi8vIEFkZGluZyBOZXcgQ2FyZCBGb3JtIGhhbmRsZXJcbmNvbnN0IGhhbmRsZUFkZENhcmRTdWJtaXQgPSAoZGF0YSkgPT4ge1xuICAgIGFkZENhcmRGb3JtLnJlbmRlckxvYWRpbmcodHJ1ZSk7XG4gICAgYXBpLmFkZE5ld0NhcmQoZGF0YSlcbiAgICAgICAgLnRoZW4oKGNhcmREYXRhKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjYXJkRWwgPSByZW5kZXJDYXJkKGNhcmREYXRhKTtcbiAgICAgICAgICAgIHNlY3Rpb24uYWRkSXRlbShjYXJkRWwpO1xuICAgICAgICAgICAgYWRkQ2FyZEZvcm0uY2xvc2UoKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycilcbiAgICAgICAgfSlcbiAgICAgICAgLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICAgICAgYWRkQ2FyZEZvcm0ucmVuZGVyTG9hZGluZyhmYWxzZSk7XG4gICAgICAgIH0pO1xufVxuXG4vL0VkaXQgUHJvZmlsZSBGb3JtIGhhbmRsZXJcbmNvbnN0IGhhbmRsZVByb2ZpbGVGb3JtU3VibWl0ID0gKGlucHV0KSA9PiB7XG4gICAgZWRpdFByb2ZpbGVNb2RhbC5yZW5kZXJMb2FkaW5nKHRydWUpO1xuICAgIGFwaS5lZGl0UHJvZmlsZShpbnB1dClcbiAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgdXNlckluZm8uc2V0VXNlckluZm8oe1xuICAgICAgICAgICAgICAgIG5hbWU6IGlucHV0Lm5hbWUsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IGlucHV0LmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBlZGl0UHJvZmlsZU1vZGFsLmNsb3NlKCk7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgIH0pXG4gICAgICAgIC5maW5hbGx5KCgpID0+IHtcbiAgICAgICAgICAgIGVkaXRQcm9maWxlTW9kYWwucmVuZGVyTG9hZGluZyhmYWxzZSk7XG4gICAgICAgIH0pO1xufVxuXG5jb25zdCBvcGVuUHJvZmlsZU1vZGFsID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgbmFtZSwgZGVzY3JpcHRpb24gfSA9IHVzZXJJbmZvLmdldFVzZXJJbmZvKCk7XG4gICAgc2VsZWN0b3JzLmZvcm1JbnB1dE5hbWUudmFsdWUgPSBuYW1lO1xuICAgIHNlbGVjdG9ycy5mb3JtSW5wdXREZXNjcmlwdGlvbi52YWx1ZSA9IGRlc2NyaXB0aW9uO1xuICAgIGZvcm1WYWxpZGF0b3JzW3Byb2ZpbGVFZGl0Rm9ybS5nZXRBdHRyaWJ1dGUoJ25hbWUnKV0ucmVzZXRWYWxpZGF0aW9uKCk7XG4gICAgZWRpdFByb2ZpbGVNb2RhbC5vcGVuKCk7XG59XG5cbi8vQ2hhbmdpbmcgYXZhdGFyIGhlbHBlclxuY29uc3QgaGFuZGxlVXBkYXRlQXZhdGFyID0gKGlucHV0KSA9PiB7XG4gICAgdXBkYXRlQXZhdGFyTW9kYWwucmVuZGVyTG9hZGluZyh0cnVlKTtcbiAgICBhcGkuZWRpdFByb2ZpbGVBdmF0YXIoaW5wdXQpXG4gICAgICAgIC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICB1c2VySW5mby5zZXRBdmF0YXJJbWFnZShkYXRhLmF2YXRhcik7XG4gICAgICAgICAgICB1cGRhdGVBdmF0YXJNb2RhbC5jbG9zZSgpO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICB9KVxuICAgICAgICAuZmluYWxseSgoKSA9PiB7XG4gICAgICAgICAgICB1cGRhdGVBdmF0YXJNb2RhbC5yZW5kZXJMb2FkaW5nKGZhbHNlKTtcbiAgICAgICAgfSlcbn1cblxuLy9jaGFuZ2UgYXZhdGFyXG5jb25zdCB1cGRhdGVBdmF0YXJNb2RhbCA9IG5ldyBQb3B1cFdpdGhGb3JtKHNlbGVjdG9ycy5jaGFuZ2VBdmF0YXJQb3B1cCwgaGFuZGxlVXBkYXRlQXZhdGFyKTtcbnVwZGF0ZUF2YXRhck1vZGFsLnNldEV2ZW50TGlzdGVuZXJzKCk7XG5cbnNlbGVjdG9ycy51cGRhdGVBdmF0YXJCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgdXBkYXRlQXZhdGFyTW9kYWwub3BlbigpO1xuICAgIGZvcm1WYWxpZGF0b3JzW3NlbGVjdG9ycy5hdmF0YXJGb3JtLmdldEF0dHJpYnV0ZSgnbmFtZScpXS5yZXNldFZhbGlkYXRpb24oKTtcbn0pXG5cbi8vUG9wdXBXaXRoSW1hZ2VcbmNvbnN0IHBvcHVwSW1hZ2UgPSBuZXcgUG9wdXBXaXRoSW1hZ2Uoc2VsZWN0b3JzLnByZXZpZXdQb3B1cCk7XG5wb3B1cEltYWdlLmNsb3NlKCk7XG5cbi8vZGVsZXRlIG1vZGFsXG5jb25zdCBjb25maXJtRGVsZXRlTW9kYWwgPSBuZXcgUG9wdXBXaXRoQ29uZmlybShzZWxlY3RvcnMuY29uZmlybURlbGV0ZU1vZGFsLCBcbiAgICAoY2FyZCkgPT4ge2hhbmRsZURlbGV0ZShjYXJkKX0pO1xuY29uZmlybURlbGV0ZU1vZGFsLnNldEV2ZW50TGlzdGVuZXJzKCk7XG5cbi8vZWRpdCBwcm9maWxlXG5jb25zdCBlZGl0UHJvZmlsZU1vZGFsID0gbmV3IFBvcHVwV2l0aEZvcm0oc2VsZWN0b3JzLmVkaXRGb3JtUG9wdXAsIGhhbmRsZVByb2ZpbGVGb3JtU3VibWl0KTtcbmVkaXRQcm9maWxlTW9kYWwuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcblxuZWRpdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG9wZW5Qcm9maWxlTW9kYWwpXG5cbi8vYWRkIG5ldyBjYXJkXG5jb25zdCBhZGRDYXJkRm9ybSA9IG5ldyBQb3B1cFdpdGhGb3JtKHNlbGVjdG9ycy5hZGRGb3JtUG9wdXAsIGhhbmRsZUFkZENhcmRTdWJtaXQpO1xuYWRkQ2FyZEZvcm0uc2V0RXZlbnRMaXN0ZW5lcnMoKTtcblxuYWRkQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIGZvcm1WYWxpZGF0b3JzW2FkZE5ld0NhcmRGb3JtLmdldEF0dHJpYnV0ZSgnbmFtZScpXS5yZXNldFZhbGlkYXRpb24oKTtcbiAgICBhZGRDYXJkRm9ybS5vcGVuKCk7XG59KSIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFVzZXJJbmZvIHtcbiAgICBjb25zdHJ1Y3Rvcih7IG5hbWVFbCwgZGVzY3JpcHRpb25FbCwgYXZhdGFyRWwgfSkge1xuICAgICAgICB0aGlzLl9uYW1lRWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG5hbWVFbCk7XG4gICAgICAgIHRoaXMuX2Rlc2NyaXB0aW9uRWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGRlc2NyaXB0aW9uRWwpO1xuICAgICAgICB0aGlzLl9saW5rID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihhdmF0YXJFbCk7XG4gICAgfVxuXG4gICAgZ2V0VXNlckluZm8oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuYW1lOiB0aGlzLl9uYW1lRWwudGV4dENvbnRlbnQsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogdGhpcy5fZGVzY3JpcHRpb25FbC50ZXh0Q29udGVudCxcbiAgICAgICAgICAgIGF2YXRhcjogdGhpcy5fbGluay5zcmMsXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRVc2VySW5mbyh7IG5hbWUsIGRlc2NyaXB0aW9uIH0pIHtcbiAgICAgICAgdGhpcy5fbmFtZUVsLnRleHRDb250ZW50ID0gbmFtZTtcbiAgICAgICAgdGhpcy5fZGVzY3JpcHRpb25FbC50ZXh0Q29udGVudCA9IGRlc2NyaXB0aW9uO1xuICAgIH1cblxuICAgIHNldEF2YXRhckltYWdlKGxpbmspIHtcbiAgICAgICAgdGhpcy5fbGluay5zcmMgPSBsaW5rO1xuICAgIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBBcGkge1xuICAgIGNvbnN0cnVjdG9yKHsgYmFzZVVybCwgaGVhZGVycyB9KSB7XG4gICAgICAgIHRoaXMuX3VybCA9IGJhc2VVcmw7XG4gICAgICAgIHRoaXMuX2hlYWRlcnMgPSBoZWFkZXJzO1xuICAgICAgICB0aGlzLl9hdXRob3JpemF0aW9uID0gaGVhZGVycy5hdXRob3JpemF0aW9uO1xuICAgIH1cblxuICAgIF9jaGVja1Jlc3BvbnNlKHJlcykge1xuICAgICAgICBpZihyZXMub2spIHtcbiAgICAgICAgICAgIHJldHVybiByZXMuanNvbigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChgRXJyb3IgJHtyZXMuc3RhdHVzfWApO1xuICAgIH1cblxuICAgIGdldEluaXRpYWxDYXJkcygpIHtcbiAgICAgICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX3VybH0vY2FyZHNgLCB7XG4gICAgICAgICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKHRoaXMuX2NoZWNrUmVzcG9uc2UpO1xuICAgIH1cbiAgICAgIFxuICAgIGZldGNoVXNlckluZm8oKSB7XG4gICAgICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl91cmx9L3VzZXJzL21lYCwge1xuICAgICAgICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4odGhpcy5fY2hlY2tSZXNwb25zZSk7XG4gICAgfVxuXG4gICAgZWRpdFByb2ZpbGUoeyBuYW1lLCBkZXNjcmlwdGlvbiB9KSB7XG4gICAgICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl91cmx9L3VzZXJzL21lYCwge1xuICAgICAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxuICAgICAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXG4gICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgIGFib3V0OiBkZXNjcmlwdGlvbixcbiAgICAgICAgICB9KSxcbiAgICAgICAgfSkudGhlbih0aGlzLl9jaGVja1Jlc3BvbnNlKTtcbiAgICAgIH1cblxuICAgIGVkaXRQcm9maWxlQXZhdGFyKHsgbGluayB9KSB7XG4gICAgICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl91cmx9L3VzZXJzL21lL2F2YXRhcmAsIHtcbiAgICAgICAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxuICAgICAgICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgXG4gICAgICAgICAgICAgICAgYXZhdGFyOiBsaW5rLFxuICAgICAgICAgICAgfSksXG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKHRoaXMuX2NoZWNrUmVzcG9uc2UpO1xuICAgIH1cblxuICAgIGFkZE5ld0NhcmQoeyBjYXJkTmFtZSwgY2FyZExpbmsgfSkge1xuICAgICAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fdXJsfS9jYXJkc2AsIHtcbiAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBcbiAgICAgICAgICAgICAgICBuYW1lOiBjYXJkTmFtZSwgXG4gICAgICAgICAgICAgICAgbGluazogY2FyZExpbmssXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4odGhpcy5fY2hlY2tSZXNwb25zZSk7XG4gICAgfVxuXG4gICAgZGVsZXRlQ2FyZChjYXJkSWQpIHtcbiAgICAgICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX3VybH0vY2FyZHMvJHtjYXJkSWR9YCwge1xuICAgICAgICAgICAgbWV0aG9kOiBcIkRFTEVURVwiLFxuICAgICAgICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4odGhpcy5fY2hlY2tSZXNwb25zZSk7XG4gICAgfVxuXG4gICAgYWRkTGlrZShjYXJkSWQpIHtcbiAgICAgICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX3VybH0vY2FyZHMvJHtjYXJkSWR9L2xpa2VzYCwge1xuICAgICAgICAgICAgbWV0aG9kOiBcIlBVVFwiLFxuICAgICAgICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4odGhpcy5fY2hlY2tSZXNwb25zZSk7XG4gICAgfVxuXG4gICAgZGVsZXRlTGlrZShjYXJkSWQpIHtcbiAgICAgICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX3VybH0vY2FyZHMvJHtjYXJkSWR9L2xpa2VzYCwge1xuICAgICAgICAgICAgbWV0aG9kOiBcIkRFTEVURVwiLFxuICAgICAgICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4odGhpcy5fY2hlY2tSZXNwb25zZSk7XG4gICAgfVxuICB9IiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aEltYWdlIGV4dGVuZHMgUG9wdXAge1xuICAgIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IpIHtcbiAgICAgICAgc3VwZXIoeyBwb3B1cFNlbGVjdG9yIH0pO1xuICAgICAgICB0aGlzLl9tb2RhbE5hbWUgPSB0aGlzLl9wb3B1cC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX25hbWUnKTtcbiAgICAgICAgdGhpcy5fbW9kYWxJbWFnZSA9IHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbF9faW1hZ2UnKTtcblxuICAgICAgICBzdXBlci5zZXRFdmVudExpc3RlbmVycygpO1xuICAgIH1cblxuICAgIG9wZW4oaW1hZ2VEYXRhKSB7XG4gICAgICAgIHRoaXMuX21vZGFsTmFtZS50ZXh0Q29udGVudCA9IGltYWdlRGF0YS5uYW1lO1xuICAgICAgICB0aGlzLl9tb2RhbEltYWdlLmFsdCA9IGltYWdlRGF0YS5uYW1lO1xuICAgICAgICB0aGlzLl9tb2RhbEltYWdlLnNyYyA9IGltYWdlRGF0YS5saW5rO1xuXG4gICAgICAgIHN1cGVyLm9wZW4oKTtcbiAgICB9XG59IiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aENvbmZpcm0gZXh0ZW5kcyBQb3B1cCB7XG4gICAgY29uc3RydWN0b3IocG9wdXBTZWxlY3Rvcikge1xuICAgICAgICBzdXBlcih7IHBvcHVwU2VsZWN0b3IgfSk7XG4gICAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbiA9IHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2J1dHRvblwiKTtcbiAgICB9XG5cbiAgICBzZXRFdmVudExpc3RlbmVycygpIHtcbiAgICAgICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcblxuICAgICAgICB0aGlzLl9zdWJtaXRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgKGV2dCkgPT4ge1xuICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVEZWxldGVTdWJtaXQoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgb3BlbihoYW5kbGVEZWxldGVDYWxsYmFjaykge1xuICAgICAgICB0aGlzLl9oYW5kbGVEZWxldGVDYWxsYmFjayA9IGhhbmRsZURlbGV0ZUNhbGxiYWNrO1xuICAgICAgICBzdXBlci5vcGVuKCk7XG4gICAgfVxuXG4gICAgc2V0U3VibWl0QWN0aW9uKGFjdGlvbikge1xuICAgICAgICB0aGlzLl9oYW5kbGVEZWxldGVTdWJtaXQgPSBhY3Rpb247XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibSIsIm8iLCJvYmoiLCJwcm9wIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwicCIsImIiLCJkb2N1bWVudCIsImJhc2VVUkkiLCJzZWxmIiwibG9jYXRpb24iLCJocmVmIiwiVVJMIiwic2VsZWN0b3JzIiwiY2FyZHNMaXN0IiwiY2FyZFRlbXBsYXRlIiwicHJldmlld1BvcHVwIiwiZWRpdEZvcm1Qb3B1cCIsImFkZEZvcm1Qb3B1cCIsInByb2ZpbGVUaXRsZSIsInByb2ZpbGVEZXNjcmlwdGlvbiIsInByb2ZpbGVBdmF0YXIiLCJmb3JtTW9kYWxDb250YWluZXIiLCJpbWFnZU1vZGFsQ29udGFpbmVyIiwiZm9ybUlucHV0TmFtZSIsImZvcm1JbnB1dERlc2NyaXB0aW9uIiwiY2hhbmdlQXZhdGFyUG9wdXAiLCJhdmF0YXJGb3JtIiwidXBkYXRlQXZhdGFyQnV0dG9uIiwiY29uZmlybURlbGV0ZU1vZGFsIiwiY29uc3RydWN0b3IiLCJkYXRhIiwiY2FyZFNlbGVjdG9yIiwiaGFuZGxlSW1hZ2VDbGljayIsImhhbmRsZUxpa2VDYXJkIiwiaGFuZGxlRGVsZXRlIiwiY3VycmVudFVzZXJJZCIsInRoaXMiLCJfbmFtZSIsIm5hbWUiLCJfbGluayIsImxpbmsiLCJfY2FyZElkIiwiX2lkIiwiX2xpa2VzIiwibGlrZXMiLCJfY2FyZFNlbGVjdG9yIiwiX2hhbmRsZUltYWdlQ2xpY2siLCJfaGFuZGxlRGVsZXRlIiwiX2hhbmRsZUxpa2VDYXJkIiwiX2N1cnJlbnRVc2VySWQiLCJfb3duZXIiLCJvd25lciIsIl9zZXRFdmVudExpc3RlbmVycyIsImxpa2VCdXR0b24iLCJfZWxlbWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJhZGRFdmVudExpc3RlbmVyIiwiX3NldElzTGlrZWQiLCJfaW1hZ2VNb2RhbCIsIl9nZXRUZW1wbGF0ZSIsImNvbnRlbnQiLCJjbG9uZU5vZGUiLCJoYW5kbGVMaWtlIiwiaXNMaWtlZCIsImNsYXNzTGlzdCIsImFkZCIsInJlbW92ZSIsInNvbWUiLCJsaWtlIiwiZGVsZXRlQ2FyZCIsImdlbmVyYXRlQ2FyZCIsImNhcmRJbWFnZSIsInNyYyIsImFsdCIsInRleHRDb250ZW50IiwiRm9ybVZhbGlkYXRvciIsImNvbmZpZyIsImZvcm1FbGVtZW50IiwiX2lucHV0U2VsZWN0b3IiLCJpbnB1dFNlbGVjdG9yIiwiX3N1Ym1pdEJ1dHRvblNlbGVjdG9yIiwic3VibWl0QnV0dG9uU2VsZWN0b3IiLCJfaW5hY3RpdmVCdXR0b25DbGFzcyIsImluYWN0aXZlQnV0dG9uQ2xhc3MiLCJfaW5wdXRFcnJvckNsYXNzIiwiaW5wdXRFcnJvckNsYXNzIiwiX2Vycm9yQ2xhc3MiLCJlcnJvckNsYXNzIiwiX2Zvcm1FbGVtZW50IiwiX2lucHV0TGlzdCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJfc2hvd0lucHV0RXJyb3IiLCJpbnB1dEVsZW1lbnQiLCJlcnJvck1lc3NhZ2VFbGVtZW50IiwiaWQiLCJ2YWxpZGF0aW9uTWVzc2FnZSIsIl9oaWRlSW5wdXRFcnJvciIsIl9jaGVja0lucHV0VmFsaWRpdHkiLCJ2YWxpZGl0eSIsInZhbGlkIiwiX2hhc0ludmFsaWRJbnB1dCIsIl9pbnB1dEVsZW1lbnRzIiwiZXZlcnkiLCJkaXNhYmxlQnV0dG9uIiwiX3N1Ym1pdEJ1dHRvbiIsImRpc2FibGVkIiwiX2VuYWJsZUJ1dHRvbiIsIl90b2dnbGVCdXR0b25TdGF0ZSIsImZvckVhY2giLCJlbmFibGVWYWxpZGF0aW9uIiwiZSIsInByZXZlbnREZWZhdWx0IiwicmVzZXRWYWxpZGF0aW9uIiwiUG9wdXAiLCJfcmVmIiwicG9wdXBTZWxlY3RvciIsIl9wb3B1cCIsIl9jbG9zZUJ1dHRvbiIsInNldEV2ZW50TGlzdGVuZXJzIiwiZXZ0IiwidGFyZ2V0IiwiY3VycmVudFRhcmdldCIsImNsb3NlIiwib3BlbiIsIl9oYW5kbGVFc2NDbG9zZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJrZXkiLCJQb3B1cFdpdGhGb3JtIiwiaGFuZGxlRm9ybVN1Ym1pdCIsInN1cGVyIiwiX2Zvcm0iLCJfZm9ybUlucHV0cyIsIl9oYW5kbGVGb3JtU3VibWl0IiwiX2J1dHRvblRleHQiLCJfZ2V0SW5wdXRWYWx1ZXMiLCJpbnB1dE9iamVjdCIsImlucHV0IiwidmFsdWUiLCJyZW5kZXJMb2FkaW5nIiwiaXNMb2FkaW5nIiwicmVzZXQiLCJTZWN0aW9uIiwiaXRlbXMiLCJyZW5kZXJlciIsIl9pdGVtcyIsIl9yZW5kZXJlciIsInJlbmRlckl0ZW1zIiwiaXRlbSIsImFkZEl0ZW0iLCJlbGVtZW50IiwicHJlcGVuZCIsImVkaXRCdXR0b24iLCJhZGRCdXR0b24iLCJhZGROZXdDYXJkRm9ybSIsImZvcm1zIiwicHJvZmlsZUVkaXRGb3JtIiwidXNlckluZm8iLCJuYW1lRWwiLCJkZXNjcmlwdGlvbkVsIiwiYXZhdGFyRWwiLCJfbmFtZUVsIiwiX2Rlc2NyaXB0aW9uRWwiLCJnZXRVc2VySW5mbyIsImRlc2NyaXB0aW9uIiwiYXZhdGFyIiwic2V0VXNlckluZm8iLCJfcmVmMiIsInNldEF2YXRhckltYWdlIiwiYXBpIiwiYmFzZVVybCIsImhlYWRlcnMiLCJfdXJsIiwiX2hlYWRlcnMiLCJfYXV0aG9yaXphdGlvbiIsImF1dGhvcml6YXRpb24iLCJfY2hlY2tSZXNwb25zZSIsInJlcyIsIm9rIiwianNvbiIsIlByb21pc2UiLCJyZWplY3QiLCJzdGF0dXMiLCJnZXRJbml0aWFsQ2FyZHMiLCJmZXRjaCIsInRoZW4iLCJmZXRjaFVzZXJJbmZvIiwiZWRpdFByb2ZpbGUiLCJtZXRob2QiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsImFib3V0IiwiZWRpdFByb2ZpbGVBdmF0YXIiLCJfcmVmMyIsImFkZE5ld0NhcmQiLCJfcmVmNCIsImNhcmROYW1lIiwiY2FyZExpbmsiLCJjYXJkSWQiLCJhZGRMaWtlIiwiZGVsZXRlTGlrZSIsInNlY3Rpb24iLCJhbGwiLCJ1c2VyRGF0YSIsImNhcmRzIiwiY2FyZCIsInJlbmRlckNhcmQiLCJjYXRjaCIsImVyciIsImNvbnNvbGUiLCJsb2ciLCJpbWFnZURhdGEiLCJwb3B1cEltYWdlIiwic2V0U3VibWl0QWN0aW9uIiwiZmluYWxseSIsInJlbW92ZUxpa2UiLCJDYXJkIiwiZm9ybVZhbGlkYXRvcnMiLCJmb3JtVmFsaWRhdGlvbkNvbmZpZyIsImZvcm1TZWxlY3RvciIsIkFycmF5IiwiZnJvbSIsInZhbGlkYXRvciIsImZvcm1OYW1lIiwiZ2V0QXR0cmlidXRlIiwidXBkYXRlQXZhdGFyTW9kYWwiLCJlcnJvciIsIl9tb2RhbE5hbWUiLCJfbW9kYWxJbWFnZSIsIl9oYW5kbGVEZWxldGVTdWJtaXQiLCJoYW5kbGVEZWxldGVDYWxsYmFjayIsIl9oYW5kbGVEZWxldGVDYWxsYmFjayIsImFjdGlvbiIsImVkaXRQcm9maWxlTW9kYWwiLCJvcGVuUHJvZmlsZU1vZGFsIiwiYWRkQ2FyZEZvcm0iLCJjYXJkRGF0YSIsImNhcmRFbCJdLCJzb3VyY2VSb290IjoiIn0=